using System;
using cogsBurger;
using System.Linq;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;
using System.ComponentModel.DataAnnotations;
using System.Xml.Linq;

namespace Cogs.DataAnnotations
{
    [AttributeUsage(AttributeTargets.All)]
    public class ExclusiveRangeAttribute : RangeAttribute
    {
        public ExclusiveRangeAttribute(int minimum, int maximum) : base(minimum, maximum) { }

        public override bool IsValid(object value)
        {
            // Automatically pass if value is null or empty. RequiredAttribute should be used to assert a value is not empty.
            if (value == null)
            {
                return true;
            }
            string s = value as string;
            if (s != null && String.IsNullOrEmpty(s))
            {
                return true;
            }
            dynamic val = value;
            dynamic min = Minimum;
            dynamic max = Maximum;

            if (val <= min) { return false; }
            if (val >= max) { return false; }
            return true;
        }
    }


    [AttributeUsage(AttributeTargets.All)]
    public class StringValidationAttribute : ValidationAttribute
    {
        Regex Rgx;
        List<string> Enumerations;

        public StringValidationAttribute(string[] enumerations, string pattern = null)
        {
            if (pattern != null) { this.Rgx = new Regex(pattern); }
            if (enumerations != null) { this.Enumerations = new List<string>(enumerations); }
        }

        public override bool IsValid(object value)
        {
            if(value == null)
            {
                return true;
            }
            if (Enumerations != null && !Enumerations.Contains(value.ToString())) { return false; }
            // check regex Pattern
            if (Rgx != null && !this.Rgx.IsMatch(value.ToString())) { return false; }
            return true;
        }
    }


    public struct CogsDate
    {
        public DateTimeOffset DateTime { get; set; }
        public DateTimeOffset Date { get; set; }
        public Tuple<int, int, string> GYearMonth { get; set; }
        public Tuple<int, string> GYear { get; set; }
        public TimeSpan Duration { get; set; }
        public enum CogsDateType { DateTime, Date, GYearMonth, GYear, Duration } 
        public CogsDateType UsedType { get; private set; }

        public CogsDate(DateTimeOffset item, bool isDate = false) : this()
        {
            if (isDate)
            {
                Date = item;
                UsedType = CogsDateType.Date;
            }
            else
            {
                DateTime = item;
                UsedType = CogsDateType.DateTime;
            }
        }

        public CogsDate(Tuple<int, int, string> item) : this()
        {
            GYearMonth = item;
            UsedType = CogsDateType.GYearMonth;
        }

        public CogsDate(Tuple<int, string> item) : this()
        {
            GYear = item;
            UsedType = CogsDateType.GYear;
        }

        public CogsDate(TimeSpan item) : this()
        {
            Duration = item;
            UsedType = CogsDateType.Duration;
        }

        public string GetUsedType()
        {
            switch (UsedType)
            {
                case CogsDateType.Date: { return "date"; }
                case CogsDateType.DateTime: { return "datetime"; }
                case CogsDateType.Duration: { return "duration"; }
                case CogsDateType.GYear: { return "year"; }
                case CogsDateType.GYearMonth: { return "YearMonth"; }
            }
            return null;  
        }

        public object GetValue()
        {
            switch (UsedType)
            {
                case CogsDateType.DateTime:
                    {
						if (DateTime == default(DateTimeOffset)) { return null; }
                        return DateTime.ToString("yyyy-MM-dd\\THH:mm:ss.FFFFFFFK");
                    }
                case CogsDateType.Date:
                    {
						if (Date == default(DateTimeOffset)) { return null; }
                        return Date.ToString("u").Split(' ')[0];
                    }
                case CogsDateType.GYearMonth:
                    {
						if (GYearMonth == null) { return null; }
						if(GYearMonth.Item3 != null) 
						{ 
						return new JObject(new JProperty("year", GYearMonth.Item1), 
							new JProperty("month", GYearMonth.Item2), new JProperty("timezone", GYearMonth.Item3)); 
						}
                        return new JObject(new JProperty("year", GYearMonth.Item1), 
							new JProperty("month", GYearMonth.Item2));
                    }
                case CogsDateType.GYear:
                    {
						if (GYear == null) { return null; }
						if(GYear.Item2 != null) { return new JObject(new JProperty("year", GYear.Item1), new JProperty("timezone", GYear.Item2)); }
                        return new JObject(new JProperty("year", GYear.Item1));
                    }
                case CogsDateType.Duration:
                    {
						if (Duration == default(TimeSpan)) { return null; }
                        return Duration.Ticks;
                    }
            }
            return null;
        }
    }
}

namespace Cogs.SimpleTypes
{
	public class GYear : IComparable
	{
		int Value;
		string Timezone;

		public GYear(int year)
		{
			Value = year;
		}

		public GYear(int year, string zone)
		{
			Value = year;
			Timezone = zone;
		}

		public override string ToString()
		{
			if (Timezone != null) 
			{
				if (char.IsDigit(Timezone[0])) { return Value + "+" + Timezone; }
				return Value + Timezone; 
			}
			return Value.ToString();
		}

		public JObject ToJson()
		{
            if (Timezone != null) { return new JObject(new JProperty("year", Value), new JProperty("timezone", Timezone)); }
            return new JObject(new JProperty("year", Value));
        }

        public int CompareTo(object obj)
        {
            if (obj == null || obj.GetType() != typeof(GYear)) { return -1; }
            var other = (GYear)obj;
            if (other.Value < Value) { return -1; }
            if (other.Value == Value)
            {
                if (other.Timezone == null && Timezone == null) { return 0; }
                if (other.Timezone == null) { return -1; }
                if (Timezone == null) { return 1; }
                if (other.Timezone.Equals(Timezone)) { return 0; }
                return -1;
            }
            return 1;
        }
    }

    public class GMonth : IComparable
    {
        int Value;
        string Timezone;

        public GMonth(int month)
        {
            Value = month;
        }

        public GMonth(int month, string zone)
        {
            Value = month;
            Timezone = zone;
        }

        public override string ToString()
        {
            if (Timezone != null)
            {
                if (char.IsDigit(Timezone[0])) { return Value + "+" + Timezone; }
                return Value + Timezone;
            }
            return Value.ToString();
        }

        public JObject ToJson()
        {
            if (Timezone != null) { return new JObject(new JProperty("month", Value), new JProperty("timezone", Timezone)); }
            return new JObject(new JProperty("month", Value));
        }

        public int CompareTo(object obj)
        {
            if (obj == null || obj.GetType() != typeof(GMonth)) { return -1; }
            var other = (GMonth)obj;
            if (other.Value < Value) { return -1; }
            if (other.Value == Value)
            {
                if (other.Timezone == null && Timezone == null) { return 0; }
                if (other.Timezone == null) { return -1; }
                if (Timezone == null) { return 1; }
                if (other.Timezone.Equals(Timezone)) { return 0; }
                return -1;
            }
            return 1;
        }
    }

    public class GDay : IComparable
    {
        int Value;
        string Timezone;

        public GDay(int day)
        {
            Value = day;
        }

        public GDay(int day, string zone)
        {
            Value = day;
            Timezone = zone;
        }

        public override string ToString()
        {
            if (Timezone != null)
            {
                if (char.IsDigit(Timezone[0])) { return Value + "+" + Timezone; }
                return Value + Timezone;
            }
            return Value.ToString();
        }

        public JObject ToJson()
        {
            if (Timezone != null) { return new JObject(new JProperty("day", Value), new JProperty("timezone", Timezone)); }
            return new JObject(new JProperty("day", Value));
        }

        public int CompareTo(object obj)
        {
            if (obj == null || obj.GetType() != typeof(GDay)) { return -1; }
            var other = (GDay)obj;
            if (other.Value < Value) { return -1; }
            if (other.Value == Value)
            {
                if (other.Timezone == null && Timezone == null) { return 0; }
                if (other.Timezone == null) { return -1; }
                if (Timezone == null) { return 1; }
                if (other.Timezone.Equals(Timezone)) { return 0; }
                return -1;
            }
            return 1;
        }
    }

    public class GYearMonth : IComparable
    {
        int Y;
        int M;
        string Timezone;

        public GYearMonth(int year, int month)
        {
            Y = year;
            M = month;
        }

        public GYearMonth(int year, int month, string zone)
        {
            Y = year;
            M = month;
            Timezone = zone;
        }

        public override string ToString()
        {
            if (Timezone != null)
            {
                if (char.IsDigit(Timezone[0])) { return Y + "-" + M + "+" + Timezone; }
                return Y + "-" + M + Timezone;
            }
            return Y + "-" + M;
        }

        public JObject ToJson()
        {
            if (Timezone != null) { return new JObject(new JProperty("year", Y), new JProperty("month", M), new JProperty("timezone", Timezone)); }
            return new JObject(new JProperty("year", Y), new JProperty("month", M));
        }

        public int CompareTo(object obj)
        {
            if (obj == null || obj.GetType() != typeof(GYearMonth)) { return -1; }
            var other = (GYearMonth)obj;
            if (other.Y < Y) { return -1; }
            if (other.Y == Y)
            {
                if (other.M < M) { return -1; }
                if (other.M == M)
                {
                    if (other.Timezone == null && Timezone == null) { return 0; }
                    if (other.Timezone == null) { return -1; }
                    if (Timezone == null) { return 1; }
                    if (other.Timezone.Equals(Timezone)) { return 0; }
                    return -1;
                }
                if (other.M > M) { return 1; }
            }
            return 1;
        }
    }

    public class GMonthDay : IComparable
    {
        int M;
        int D;
        string Timezone;

        public GMonthDay(int month, int day)
        {
            M = month;
            D = day;
        }

        public GMonthDay(int month, int day, string zone)
        {
            M = month;
            D = day;
            Timezone = zone;
        }

        public override string ToString()
        {
            if (Timezone != null)
            {
                if (char.IsDigit(Timezone[0])) { return M + "-" + D + "+" + Timezone; }
                return M + "-" + D + Timezone;
            }
            return M + "-" + D;
        }

        public JObject ToJson()
        {
            if (Timezone != null) { return new JObject(new JProperty("month", M), new JProperty("day", D), new JProperty("timezone", Timezone)); }
            return new JObject(new JProperty("month", M), new JProperty("day", D));
        }

        public int CompareTo(object obj)
        {
            if (obj == null || obj.GetType() != typeof(GMonthDay)) { return -1; }
            var other = (GMonthDay)obj;
            if (other.M < M) { return -1; }
            if (other.M == M)
            {
                if (other.D < D) { return -1; }
                if (other.D == D)
                {
                    if (other.Timezone == null && Timezone == null) { return 0; }
                    if (other.Timezone == null) { return -1; }
                    if (Timezone == null) { return 1; }
                    if (other.Timezone.Equals(Timezone)) { return 0; }
                    return -1;
                }
                if (other.D > D) { return 1; }
            }
            return 1;
        }
    }
}